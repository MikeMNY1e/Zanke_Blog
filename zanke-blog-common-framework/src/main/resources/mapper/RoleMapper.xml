<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zanke.mapper.RoleMapper">

    <resultMap id="RoleVoResultMap" type="roleVo">
        <id column="id" property="id" />
    </resultMap>


    <select id="selectRoleKeysByUserId" resultType="string">
        select
            r.role_key
        from
            user_role as ur
            left join role as r
            on r.id = ur.role_id
        where
            ur.user_id = #{id} and
            ur.`status` = 0 and
            r.`status` = 0 and
            r.`del_flag` = 0
    </select>


    <select id="selectAllRoleByRoleNameAndStatus" resultMap="RoleVoResultMap">
        select
            id,
            role_name,
            role_key,
            role_sort,
            status,
            remark
        from
            role
        where
            <if test="roleName != null">
                role_name like concat('%',#{roleName},'%') and
            </if>
            <if test="status != null">
                status = #{status} and
            </if>
            `del_flag` = 0
        order by
            role_sort
    </select>


    <update id="updateStatus">
        update
            role
        set
            update_time = #{updateTime},
            status = #{status},
            update_by = #{updateBy}
        where
            id = #{id}
    </update>


    <insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into
            role (
            role_name,
            role_key,
            role_sort,
            status,
            remark,
            create_by,
            create_time
            )
        values
        (
            #{roleName},
            #{roleKey},
            #{roleSort},
            #{status},
            #{remark},
            #{createBy},
            #{createTime}
        )
    </insert>


    <select id="selectRoleById" resultMap="RoleVoResultMap">
        select
            id,
            role_name,
            role_key,
            role_sort,
            status,
            remark
        from
            role
        where
            id = #{id}
    </select>


    <update id="updateRole">
        update
            role
        set
            role_name = #{roleName},
            role_key = #{roleKey},
            role_sort = #{roleSort},
            remark = #{remark},
            status = #{status},
            update_by = #{updateBy},
            update_time = #{updateTime}
        where
            id = #{id}
    </update>


    <update id="deleteRole">
        update
            role
        set
            del_flag = 1
        where
            id = #{id}
    </update>

    <select id="selectDisableRoleCountByRoleId" resultType="int">
        select
            count(*)
        from
            role
        where
            id in
            <foreach collection="roleIds" open="(" close=")" separator="," item="id">
                #{id}
            </foreach> and
            (status = 1 or
            del_flag = 1)
    </select>



</mapper>